# Please refer https://aka.ms/HTTPSinContainer on how to setup an https developer certificate for your ASP.NET Core service.

version: '3.9'

services:
  database:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=Change123!@#
    ports:
      - "1433:1433"


  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
      - "15672:15672"


  mongodb:
    image: mongo:6-jammy
    ports:
      - '27017:27017'
    # volumes:
    #   - dbdata6:/data/db

  rest:
    image: rest
    build:
      context: .
      dockerfile: Services/Rest/Rests.Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=80
      - ASPNETCORE_HTTP_PORTS=443
      - ConnectionStringSql=Server=database;Database=RestDb;User ID=SA;Password=Change123!@#;TrustServerCertificate=True;
      - MessageQueueConnection__host=rabbitmq
      - MessageQueueConnection__username=guest
      - MessageQueueConnection__password=guest
      - loki=http://loki:3100
      - OpenTelemetryURL=http://collector:4317
    ports:
      - 5212:80 #Swagger
      - 5112:443 #API
    depends_on:
      - rabbitmq

  # activity:
  #   image: activity
  #   build:
  #     context: .
  #     dockerfile: Services/Activities/Activities.Api/Dockerfile
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Development
  #     - ASPNETCORE_HTTP_PORTS=80
  #     - ASPNETCORE_HTTP_PORTS=443
  #     - ConnectionStringSql=Server=database;Database=ActivityDb;User ID=SA;Password=Change123!@#;TrustServerCertificate=True;
  #     - MessageQueueConnection__host=rabbitmq
  #     - MessageQueueConnection__username=guest
  #     - MessageQueueConnection__password=guest
  #     - OpenTelemetryURL=http://collector:4317
  #     - loki=http://loki:3100
  #   ports:
  #     - 4212:80 #Swagger
  #     - 4112:443 #API
  #   depends_on:
  #     - rabbitmq

  # worker:
  #   image: worker
  #   build:
  #     context: .
  #     dockerfile: Services/Worker/Worker.Api/Dockerfile
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Development
  #   ports:
  #     - 6212:80 #Swagger
  #     - 6112:443 #API
  #   depends_on:
  #     - rabbitmq

  activity-validation-result:
    image: activity-validation-result
    build:
      context: .
      dockerfile: Services/ActivityValidationResult/ActivityValidationResult.Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - MongoDbConfig__ConnectionString=mongodb://mongodb:27017
      - MessageQueueConnection__host=rabbitmq
      - MessageQueueConnection__username=guest
      - MessageQueueConnection__password=guest
      - loki=http://loki:3100
      - OpenTelemetryURL=http://collector:4317

    ports:
      - 6212:80 #Swagger
      - 6112:443 #API
    depends_on:
      - mongodb
      - rabbitmq

  # apigatewayqueryapi:
  #   image: apigatewayqueryapi
  #   build:
  #     context: .
  #     dockerfile: ApiGateway.Queries/Dockerfile
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Development
  #     - activityUrl=http://activityapi:4212
  #     - restUrl=http://restapi:5212
  #     - workerUrl=http://workerapi:6212
  #   ports:
  #     - 7212:80 #Swagger
  #     - 7112:443 #API
  #   depends_on:
  #     - workerapi
  #     - activityapi
  #     - restapi


##### Observability #####
 # Jaeger
  jaeger:
    container_name: jaeger-tracing
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
# Prometheus
  prometheus:
    container_name: prometheus-metrics
    image: prom/prometheus
    volumes:
      - ./otel/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090

 # Grafana Loki
  loki:
    container_name: loki-logs
    image: grafana/loki:3.0.0
    volumes:
      - ./otel/loki-config.yaml:/conf/loki-config.yaml
    command: [ "--config.file=/conf/loki-config.yaml" ]
    ports:
      - 3100:3100

 # Grafana
  grafana:
    container_name: grafana
    image: grafana/grafana:main-ubuntu
    user: "0"
    ports:
      - "3000:3000"
    volumes:
      - ./otel/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./otel/default.yaml:/etc/grafana/provisioning/dashboards/dashboard.yml
      - ./otel/dashboard.json:/usr/lib/dashboards/dashboard.json
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    depends_on:
        loki:
            condition: service_healthy

# Collector
  collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector
    volumes:
      - ./otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
    depends_on:
      - jaeger
      - prometheus

# volumes:
#   dbdata6:
